%group,title="Problem 1",description="Button Read"
========================================================================================================
Problem 1

Write a program that will read the status of the 
switches and reflect this status on your LEDs.
%uasm65,title=""
    org 0200h
    
main:
    LDA 0a600h
    STA 0a200h
    
    JMP main
    
    end
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S10C0200AD00A68D00A24C000221
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0200            000001 |    org 0200h
                      000002 |    
      0200            000003 |main:
      0200 AD 00 A6   000004 |    LDA 0a600h
      0203 8D 00 A2   000005 |    STA 0a200h
                      000006 |    
      0206 4C 00 02   000007 |    JMP main
                      000008 |    
                      000009 |    end
      
      *** Symbol Table ***
      {MAIN=512, =0}
.   %/output


%/group

%group,title="Problem 2",description="Button to Hex Display"
========================================================================================================
Problem 2

Write a program that will read the status of the 
switches and output this status as a HEX number 
on the terminal.
%uasm65,title=""
OutChar:  equ E003h ;Output byte in reg A to the user.
OutHex:   equ E012h ;Output a HEX number to the user.

    org 0200h
    
main:
    LDA 0a600h
    JSR OutHex
    LDA #0ah    ; New line
    JSR OutChar
    LDA #0dh    ; Carriage Return
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    
    JMP main
    
;Delay subroutine
Delay:
	pha
	txa
	pha
	tya
	pha
	
	lda #0FFh
	
OutLoop:
	ldx #0FFh

InLoop1:
	ldy #0FFh

InLoop2:
	dey
	beq InLoop2

	dex
	bne InLoop1

	sec
	sbc #1d
	bne OutLoop
	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
    
    end
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200AD00A62012E0A90A2003E0A90D201C02201C022079
      	S11702141C02201C024C0002488A489848A9FFA2FFA0FF88BE
      	S1130228F0FDCAD0F838E901D0F168A868AA686076
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0000            000001 |OutChar:  equ E003h ;Output byte in reg A to the user.
      0000            000002 |OutHex:   equ E012h ;Output a HEX number to the user.
                      000003 |
      0200            000004 |    org 0200h
                      000005 |    
      0200            000006 |main:
      0200 AD 00 A6   000007 |    LDA 0a600h
      0203 20 12 E0   000008 |    JSR OutHex
      0206 A9 0A      000009 |    LDA #0ah    ; New line
      0208 20 03 E0   000010 |    JSR OutChar
      020B A9 0D      000011 |    LDA #0dh    ; Carriage Return
      020D 20 1C 02   000012 |    JSR Delay
      0210 20 1C 02   000013 |    JSR Delay
      0213 20 1C 02   000014 |    JSR Delay
      0216 20 1C 02   000015 |    JSR Delay
                      000016 |    
      0219 4C 00 02   000017 |    JMP main
                      000018 |    
                      000019 |;Delay subroutine
      021C            000020 |Delay:
      021C 48         000021 |	pha
      021D 8A         000022 |	txa
      021E 48         000023 |	pha
      021F 98         000024 |	tya
      0220 48         000025 |	pha
                      000026 |	
      0221 A9 FF      000027 |	lda #0FFh
                      000028 |	
      0223            000029 |OutLoop:
      0223 A2 FF      000030 |	ldx #0FFh
                      000031 |
      0225            000032 |InLoop1:
      0225 A0 FF      000033 |	ldy #0FFh
                      000034 |
      0227            000035 |InLoop2:
      0227 88         000036 |	dey
      0228 F0 FD      000037 |	beq InLoop2
                      000038 |
      022A CA         000039 |	dex
      022B D0 F8      000040 |	bne InLoop1
                      000041 |
      022D 38         000042 |	sec
      022E E9 01      000043 |	sbc #1d
      0230 D0 F1      000044 |	bne OutLoop
                      000045 |	
                      000046 |;Restore registers from the stack.
      0232 68         000047 |	pla
      0233 A8         000048 |	tay
      0234 68         000049 |	pla
      0235 AA         000050 |	tax
      0236 68         000051 |	pla
                      000052 |
      0237 60         000053 |	rts
                      000054 |    
                      000055 |    end
      
      *** Symbol Table ***
      {INLOOP1=549, OUTLOOP=547, DELAY=540, OUTCHAR=57347, MAIN=512, OUTHEX=57362, INLOOP2=551, =0}
.   %/output


%/group

%group,title="Problem 3",description="Alphabet Output"
========================================================================================================
Problem 3

Write a program that will continuously output 
the alphabet character-by-character (not as a 
whole string) in reverse order at a rate 
ranging from very slow to very fast depending 
upon the switch settings. Note, the speed that 
the individual characters are displayed at is 
what is being controlled. The program's speed 
can be controlled by a waste time loop.
%uasm65,title=""
OutChar:  equ E003h ;Output byte in reg A to the user.

    org 0200h
    
    LDX #122d
    
main:
    ; Do nothing if no switch is pressed
    LDA 0a600h
    CMP #0d
    BEQ main
    
    LDA #0Ah    ; New line
    JSR OutChar
    LDA #0Dh    ; Carriage Return
    JSR OutChar
    TXA
    JSR OutChar
    
    DEX
    
    ;See what switch is being pressed
    LDA 0a600h
    
    CMP #1d
    BEQ Switch1
    
    CMP #2d
    BEQ Switch2
    
    CMP #4d
    BEQ Switch3
    
    CMP #8d
    BEQ Switch4
   
Check:
    CPX #96d
    BNE main
    
    LDX #122d
    JMP main
    
Switch1:
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    
    JMP Check
   
Switch2:
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    
    JMP Check
    
Switch3:
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    
    JMP Check
    
Switch4:
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
    
    JMP Check
    
;Delay subroutine
Delay:
	pha
	txa
	pha
	tya
	pha
	
	lda #0FFh
	
OutLoop:
	ldx #0FFh

InLoop1:
	ldy #0FFh

InLoop2:
	dey
	beq InLoop2

	dex
	bne InLoop1

	sec
	sbc #1d
	bne OutLoop
	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
    
    end
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200A27AAD00A6C900F0F9A90A2003E0A90D2003E08ACC
      	S11702142003E0CAAD00A6C901F015C902F044C904F067C9F7
      	S117022808F07EE060D0D3A27A4C020220B80220B80220B86D
      	S117023C0220B80220B80220B80220B80220B80220B802206C
      	S1170250B80220B80220B80220B80220B80220B80220B802C0
      	S11702644C2B0220B80220B80220B80220B80220B80220B8EF
      	S11702780220B80220B80220B80220B80220B80220B8024C04
      	S117028C2B0220B80220B80220B80220B80220B80220B80211
      	S11702A020B80220B8024C2B0220B80220B80220B80220B8B3
      	S11702B4024C2B02488A489848A9FFA2FFA0FF88F0FDCAD0C6
      	S10F02C8F838E901D0F168A868AA686061
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0000            000001 |OutChar:  equ E003h ;Output byte in reg A to the user.
                      000002 |
      0200            000003 |    org 0200h
                      000004 |    
      0200 A2 7A      000005 |    LDX #122d
                      000006 |    
      0202            000007 |main:
                      000008 |    ; Do nothing if no switch is pressed
      0202 AD 00 A6   000009 |    LDA 0a600h
      0205 C9 00      000010 |    CMP #0d
      0207 F0 F9      000011 |    BEQ main
                      000012 |    
      0209 A9 0A      000013 |    LDA #0Ah    ; New line
      020B 20 03 E0   000014 |    JSR OutChar
      020E A9 0D      000015 |    LDA #0Dh    ; Carriage Return
      0210 20 03 E0   000016 |    JSR OutChar
      0213 8A         000017 |    TXA
      0214 20 03 E0   000018 |    JSR OutChar
                      000019 |    
      0217 CA         000020 |    DEX
                      000021 |    
                      000022 |    ;See what switch is being pressed
      0218 AD 00 A6   000023 |    LDA 0a600h
                      000024 |    
      021B C9 01      000025 |    CMP #1d
      021D F0 15      000026 |    BEQ Switch1
                      000027 |    
      021F C9 02      000028 |    CMP #2d
      0221 F0 44      000029 |    BEQ Switch2
                      000030 |    
      0223 C9 04      000031 |    CMP #4d
      0225 F0 67      000032 |    BEQ Switch3
                      000033 |    
      0227 C9 08      000034 |    CMP #8d
      0229 F0 7E      000035 |    BEQ Switch4
                      000036 |   
      022B            000037 |Check:
      022B E0 60      000038 |    CPX #96d
      022D D0 D3      000039 |    BNE main
                      000040 |    
      022F A2 7A      000041 |    LDX #122d
      0231 4C 02 02   000042 |    JMP main
                      000043 |    
      0234            000044 |Switch1:
      0234 20 B8 02   000045 |    JSR Delay
      0237 20 B8 02   000046 |    JSR Delay
      023A 20 B8 02   000047 |    JSR Delay
      023D 20 B8 02   000048 |    JSR Delay
      0240 20 B8 02   000049 |    JSR Delay
      0243 20 B8 02   000050 |    JSR Delay
      0246 20 B8 02   000051 |    JSR Delay
      0249 20 B8 02   000052 |    JSR Delay
      024C 20 B8 02   000053 |    JSR Delay
      024F 20 B8 02   000054 |    JSR Delay
      0252 20 B8 02   000055 |    JSR Delay
      0255 20 B8 02   000056 |    JSR Delay
      0258 20 B8 02   000057 |    JSR Delay
      025B 20 B8 02   000058 |    JSR Delay
      025E 20 B8 02   000059 |    JSR Delay
      0261 20 B8 02   000060 |    JSR Delay
                      000061 |    
      0264 4C 2B 02   000062 |    JMP Check
                      000063 |   
      0267            000064 |Switch2:
      0267 20 B8 02   000065 |    JSR Delay
      026A 20 B8 02   000066 |    JSR Delay
      026D 20 B8 02   000067 |    JSR Delay
      0270 20 B8 02   000068 |    JSR Delay
      0273 20 B8 02   000069 |    JSR Delay
      0276 20 B8 02   000070 |    JSR Delay
      0279 20 B8 02   000071 |    JSR Delay
      027C 20 B8 02   000072 |    JSR Delay
      027F 20 B8 02   000073 |    JSR Delay
      0282 20 B8 02   000074 |    JSR Delay
      0285 20 B8 02   000075 |    JSR Delay
      0288 20 B8 02   000076 |    JSR Delay
                      000077 |    
      028B 4C 2B 02   000078 |    JMP Check
                      000079 |    
      028E            000080 |Switch3:
      028E 20 B8 02   000081 |    JSR Delay
      0291 20 B8 02   000082 |    JSR Delay
      0294 20 B8 02   000083 |    JSR Delay
      0297 20 B8 02   000084 |    JSR Delay
      029A 20 B8 02   000085 |    JSR Delay
      029D 20 B8 02   000086 |    JSR Delay
      02A0 20 B8 02   000087 |    JSR Delay
      02A3 20 B8 02   000088 |    JSR Delay
                      000089 |    
      02A6 4C 2B 02   000090 |    JMP Check
                      000091 |    
      02A9            000092 |Switch4:
      02A9 20 B8 02   000093 |    JSR Delay
      02AC 20 B8 02   000094 |    JSR Delay
      02AF 20 B8 02   000095 |    JSR Delay
      02B2 20 B8 02   000096 |    JSR Delay
                      000097 |    
      02B5 4C 2B 02   000098 |    JMP Check
                      000099 |    
                      000100 |;Delay subroutine
      02B8            000101 |Delay:
      02B8 48         000102 |	pha
      02B9 8A         000103 |	txa
      02BA 48         000104 |	pha
      02BB 98         000105 |	tya
      02BC 48         000106 |	pha
                      000107 |	
      02BD A9 FF      000108 |	lda #0FFh
                      000109 |	
      02BF            000110 |OutLoop:
      02BF A2 FF      000111 |	ldx #0FFh
                      000112 |
      02C1            000113 |InLoop1:
      02C1 A0 FF      000114 |	ldy #0FFh
                      000115 |
      02C3            000116 |InLoop2:
      02C3 88         000117 |	dey
      02C4 F0 FD      000118 |	beq InLoop2
                      000119 |
      02C6 CA         000120 |	dex
      02C7 D0 F8      000121 |	bne InLoop1
                      000122 |
      02C9 38         000123 |	sec
      02CA E9 01      000124 |	sbc #1d
      02CC D0 F1      000125 |	bne OutLoop
                      000126 |	
                      000127 |;Restore registers from the stack.
      02CE 68         000128 |	pla
      02CF A8         000129 |	tay
      02D0 68         000130 |	pla
      02D1 AA         000131 |	tax
      02D2 68         000132 |	pla
                      000133 |
      02D3 60         000134 |	rts
                      000135 |    
                      000136 |    end
      
      *** Symbol Table ***
      {DELAY=696, MAIN=514, INLOOP2=707, OUTCHAR=57347, INLOOP1=705, SWITCH4=681, SWITCH3=654, SWITCH2=615, SWITCH1=564, CHECK=555, OUTLOOP=703, =0}
.   %/output


%/group

%group,title="Problem 4",description="Alarm System"
========================================================================================================
Problem 4

Write a program that will do the following 
(use the AND instruction to determine which 
switches are pressed):

a. Print "The front door is open." if switch 0 is pressed.
b. Print "Your mailbox is open." if switch 1 is pressed.
c. Print "The smoke alarm is on." if switch 2 is pressed.

If more than one switch is pressed, then 
multiple messages will alternately be displayed.
%uasm65,title=""
OutChar:  equ E003h ;Output byte in reg A to the user.

PrntMess: equ E00Ch ;Print a message to the user.

    org 0200h
    
main:
    LDA 0a600h
    
    CMP #1d
    BEQ OutputSwitch1
    
    CMP #2d
    BEQ OutputSwitch2
    
    CMP #4d
    BEQ OutputSwitch3

    JMP main
    
    end
    
OutputSwitch1:
    LDX #Switch1Mess<
    LDY #Switch1Mess>
    JSR PrntMess
    
    LDA #0Ah
    JSR OutChar
    LDA #0Dh
    JSR OutChar
    
    JMP main

OutputSwitch2:
    LDX #Switch2Mess<
    LDY #Switch2Mess>
    JSR PrntMess
    
    LDA #0Ah
    JSR OutChar
    LDA #0Dh
    JSR OutChar
    
    JMP main

OutputSwitch3:
    LDX #Switch3Mess<
    LDY #Switch3Mess>
    JSR PrntMess
    
    LDA #0Ah
    JSR OutChar
    LDA #0Dh
    JSR OutChar
    
    JMP main
    
Switch1Mess:
    dbt "The front door is open."
    dbt 0d

Switch2Mess:
    dbt "Your mailbox is open."
    dbt 0d

Switch3Mess:
    dbt "The smoke alarm is open."
    dbt 0d

%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200AD00A6C901F00BC902F01BC904F02B4C0002A24ED2
      	S1170214A002200CE0A90A2003E0A90D2003E04C0002A2665F
      	S1170228A002200CE0A90A2003E0A90D2003E04C0002A27C35
      	S117023CA002200CE0A90A2003E0A90D2003E04C0002546883
      	S1170250652066726F6E7420646F6F72206973206F70656E46
      	S11702642E00596F7572206D61696C626F78206973206F709E
      	S1170278656E2E0054686520736D6F6B6520616C61726D20C0
      	S10C028C6973206F70656E2E0089
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0000            000001 |OutChar:  equ E003h ;Output byte in reg A to the user.
                      000002 |
      0000            000003 |PrntMess: equ E00Ch ;Print a message to the user.
                      000004 |
      0200            000005 |    org 0200h
                      000006 |    
      0200            000007 |main:
      0200 AD 00 A6   000008 |    LDA 0a600h
                      000009 |    
      0203 C9 01      000010 |    CMP #1d
      0205 F0 0B      000011 |    BEQ OutputSwitch1
                      000012 |    
      0207 C9 02      000013 |    CMP #2d
      0209 F0 1B      000014 |    BEQ OutputSwitch2
                      000015 |    
      020B C9 04      000016 |    CMP #4d
      020D F0 2B      000017 |    BEQ OutputSwitch3
                      000018 |
      020F 4C 00 02   000019 |    JMP main
                      000020 |    
                      000021 |    end
                      000022 |    
      0212            000023 |OutputSwitch1:
      0212 A2 4E      000024 |    LDX #Switch1Mess<
      0214 A0 02      000025 |    LDY #Switch1Mess>
      0216 20 0C E0   000026 |    JSR PrntMess
                      000027 |    
      0219 A9 0A      000028 |    LDA #0Ah
      021B 20 03 E0   000029 |    JSR OutChar
      021E A9 0D      000030 |    LDA #0Dh
      0220 20 03 E0   000031 |    JSR OutChar
                      000032 |    
      0223 4C 00 02   000033 |    JMP main
                      000034 |
      0226            000035 |OutputSwitch2:
      0226 A2 66      000036 |    LDX #Switch2Mess<
      0228 A0 02      000037 |    LDY #Switch2Mess>
      022A 20 0C E0   000038 |    JSR PrntMess
                      000039 |    
      022D A9 0A      000040 |    LDA #0Ah
      022F 20 03 E0   000041 |    JSR OutChar
      0232 A9 0D      000042 |    LDA #0Dh
      0234 20 03 E0   000043 |    JSR OutChar
                      000044 |    
      0237 4C 00 02   000045 |    JMP main
                      000046 |
      023A            000047 |OutputSwitch3:
      023A A2 7C      000048 |    LDX #Switch3Mess<
      023C A0 02      000049 |    LDY #Switch3Mess>
      023E 20 0C E0   000050 |    JSR PrntMess
                      000051 |    
      0241 A9 0A      000052 |    LDA #0Ah
      0243 20 03 E0   000053 |    JSR OutChar
      0246 A9 0D      000054 |    LDA #0Dh
      0248 20 03 E0   000055 |    JSR OutChar
                      000056 |    
      024B 4C 00 02   000057 |    JMP main
                      000058 |    
      024E            000059 |Switch1Mess:
      024E 54         000060 |    dbt "The front door is open."
      024F 68 65 20         
      0252 66 72 6F         
      0255 6E 74 20         
      0258 64 6F 6F         
      025B 72 20 69         
      025E 73 20 6F         
      0261 70 65 6E         
      0264 2E               
      0265 00         000061 |    dbt 0d
                      000062 |
      0266            000063 |Switch2Mess:
      0266 59         000064 |    dbt "Your mailbox is open."
      0267 6F 75 72         
      026A 20 6D 61         
      026D 69 6C 62         
      0270 6F 78 20         
      0273 69 73 20         
      0276 6F 70 65         
      0279 6E 2E            
      027B 00         000065 |    dbt 0d
                      000066 |
      027C            000067 |Switch3Mess:
      027C 54         000068 |    dbt "The smoke alarm is open."
      027D 68 65 20         
      0280 73 6D 6F         
      0283 6B 65 20         
      0286 61 6C 61         
      0289 72 6D 20         
      028C 69 73 20         
      028F 6F 70 65         
      0292 6E 2E            
      0294 00         000069 |    dbt 0d
      
      *** Symbol Table ***
      {PRNTMESS=57356, MAIN=512, OUTPUTSWITCH3=570, OUTPUTSWITCH2=550, OUTPUTSWITCH1=530, OUTCHAR=57347, SWITCH3MESS=636, SWITCH2MESS=614, SWITCH1MESS=590, =0}
.   %/output


%/group

%group,title="Problem 5",description="8 bit output pattern"
========================================================================================================
Problem 5

Write a program that will dump the contents of 
memory locations 0E000h - 0E010h to the output 
port as an 8 bit light pattern at a rate of 1 
location/second. Hint: you should use an index 
register to accomplish this.
%uasm65,title=""
    org 0200h
    
    LDA #0d
    LDX #0d
    
main:
    LDA 0e000h,x
    STA 0a200h
    
    JSR Delay
    JSR Delay
    JSR Delay
    JSR Delay
  
    INX
    CPX #11d
    BNE main
    
    BRK
    
;Delay subroutine
Delay:
	pha
	txa
	pha
	tya
	pha
	
	lda #0FFh
	
OutLoop:
	ldx #0FFh

InLoop1:
	ldy #0FFh

InLoop2:
	dey
	beq InLoop2

	dex
	bne InLoop1

	sec
	sbc #1d
	bne OutLoop
	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
	
	end
	
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200A900A200BD00E08D00A2201C02201C02201C0220F5
      	S11702141C02E8E00BD0E900488A489848A9FFA2FFA0FF88BE
      	S1130228F0FDCAD0F838E901D0F168A868AA686076
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0200            000001 |    org 0200h
                      000002 |    
      0200 A9 00      000003 |    LDA #0d
      0202 A2 00      000004 |    LDX #0d
                      000005 |    
      0204            000006 |main:
      0204 BD 00 E0   000007 |    LDA 0e000h,x
      0207 8D 00 A2   000008 |    STA 0a200h
                      000009 |    
      020A 20 1C 02   000010 |    JSR Delay
      020D 20 1C 02   000011 |    JSR Delay
      0210 20 1C 02   000012 |    JSR Delay
      0213 20 1C 02   000013 |    JSR Delay
                      000014 |  
      0216 E8         000015 |    INX
      0217 E0 0B      000016 |    CPX #11d
      0219 D0 E9      000017 |    BNE main
                      000018 |    
      021B 00         000019 |    BRK
                      000020 |    
                      000021 |;Delay subroutine
      021C            000022 |Delay:
      021C 48         000023 |	pha
      021D 8A         000024 |	txa
      021E 48         000025 |	pha
      021F 98         000026 |	tya
      0220 48         000027 |	pha
                      000028 |	
      0221 A9 FF      000029 |	lda #0FFh
                      000030 |	
      0223            000031 |OutLoop:
      0223 A2 FF      000032 |	ldx #0FFh
                      000033 |
      0225            000034 |InLoop1:
      0225 A0 FF      000035 |	ldy #0FFh
                      000036 |
      0227            000037 |InLoop2:
      0227 88         000038 |	dey
      0228 F0 FD      000039 |	beq InLoop2
                      000040 |
      022A CA         000041 |	dex
      022B D0 F8      000042 |	bne InLoop1
                      000043 |
      022D 38         000044 |	sec
      022E E9 01      000045 |	sbc #1d
      0230 D0 F1      000046 |	bne OutLoop
                      000047 |	
                      000048 |;Restore registers from the stack.
      0232 68         000049 |	pla
      0233 A8         000050 |	tay
      0234 68         000051 |	pla
      0235 AA         000052 |	tax
      0236 68         000053 |	pla
                      000054 |
      0237 60         000055 |	rts
                      000056 |	
                      000057 |	end
      
      *** Symbol Table ***
      {INLOOP1=549, OUTLOOP=547, DELAY=540, MAIN=516, INLOOP2=551, =0}
.   %/output


%/group

%group,title="Problem 6",description="Dual square waves"
========================================================================================================
Problem 6

Write a program that will output a 20Hz square 
wave to bit 5 of PortA and a 30Hz square wave 
to bit 6 of PortA without affecting the state 
of the other bits in the port (this will be 
checked by an oscilloscope).
%uasm65,title=""
    org 0200h
    
main:
    ; Both on
    LDA #00110000b
    STA 0a200h
    
    JSR DelayBig
    
    ; 20Hz off
    LDA #00010000b
    STA 0a200h
    
    JSR DelaySmall
    
    ; 30Hz off
    LDA #00000000b
    STA 0a200h
    
    JSR DelaySmall
    
    ; 20Hz on
    LDA #00100000b
    STA 0a200h
    
    JSR DelayBig
    
    ; Flip, 20Hz off 30Hz on
    LDA #00010000b
    STA 0a200h
    
    JSR DelayBig
    
    ; 20Hz on
    LDA #00110000b
    STA 0a200h
    
    JSR DelaySmall
    
    ; 30Hz off
    LDA #00100000b
    STA 0a200h
    
    JSR DelaySmall
    
    ; 20Hzoff
    LDA #00000000b
    STA 0a200h
    
    JSR DelayBig
    
    JMP main
    
    
;16.67ms delay subroutine
DelayBig:
	pha
	txa
	pha
	tya
	pha
	
	lda #048h
	
OutLoopBig:
	ldx #0FFh

InLoop1Big:
	ldy #0FFh

InLoop2Big:
	dey
	beq InLoop2Big

	dex
	bne InLoop1Big

	sec
	sbc #1d
	bne OutLoopBig
	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
	
;Small delay subroutine
DelaySmall:
	pha
	txa
	pha
	tya
	pha
	
	lda #024h
	
OutLoopSmall:
	ldx #0FFh

InLoop1Small:
	ldy #0FFh

InLoop2Small:
	dey
	beq InLoop2Small

	dex
	bne InLoop1Small

	sec
	sbc #1d
	bne OutLoopSmall
	
;Restore registers from the stack.
	pla
	tay
	pla
	tax
	pla

	rts
    
    end
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200A9308D00A2204302A9108D00A2205F02A9008D00DA
      	S1170214A2205F02A9208D00A2204302A9108D00A220430205
      	S1170228A9308D00A2205F02A9208D00A2205F02A9008D0086
      	S117023CA22043024C0002488A489848A948A2FFA0FF88F0B2
      	S1170250FDCAD0F838E901D0F168A868AA6860488A48984840
      	S1170264A924A2FFA0FF88F0FDCAD0F838E901D0F168A86813
      	S1060278AA68600D
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0200            000001 |    org 0200h
                      000002 |    
      0200            000003 |main:
                      000004 |    ; Both on
      0200 A9 30      000005 |    LDA #00110000b
      0202 8D 00 A2   000006 |    STA 0a200h
                      000007 |    
      0205 20 43 02   000008 |    JSR DelayBig
                      000009 |    
                      000010 |    ; 20Hz off
      0208 A9 10      000011 |    LDA #00010000b
      020A 8D 00 A2   000012 |    STA 0a200h
                      000013 |    
      020D 20 5F 02   000014 |    JSR DelaySmall
                      000015 |    
                      000016 |    ; 30Hz off
      0210 A9 00      000017 |    LDA #00000000b
      0212 8D 00 A2   000018 |    STA 0a200h
                      000019 |    
      0215 20 5F 02   000020 |    JSR DelaySmall
                      000021 |    
                      000022 |    ; 20Hz on
      0218 A9 20      000023 |    LDA #00100000b
      021A 8D 00 A2   000024 |    STA 0a200h
                      000025 |    
      021D 20 43 02   000026 |    JSR DelayBig
                      000027 |    
                      000028 |    ; Flip,20Hz off 30Hz on
      0220 A9 10      000029 |    LDA #00010000b
      0222 8D 00 A2   000030 |    STA 0a200h
                      000031 |    
      0225 20 43 02   000032 |    JSR DelayBig
                      000033 |    
                      000034 |    ; 20Hz on
      0228 A9 30      000035 |    LDA #00110000b
      022A 8D 00 A2   000036 |    STA 0a200h
                      000037 |    
      022D 20 5F 02   000038 |    JSR DelaySmall
                      000039 |    
                      000040 |    ; 30Hz off
      0230 A9 20      000041 |    LDA #00100000b
      0232 8D 00 A2   000042 |    STA 0a200h
                      000043 |    
      0235 20 5F 02   000044 |    JSR DelaySmall
                      000045 |    
                      000046 |    ; 20Hzoff
      0238 A9 00      000047 |    LDA #00000000b
      023A 8D 00 A2   000048 |    STA 0a200h
                      000049 |    
      023D 20 43 02   000050 |    JSR DelayBig
                      000051 |    
      0240 4C 00 02   000052 |    JMP main
                      000053 |    
                      000054 |    
                      000055 |;16.67ms delay subroutine
      0243            000056 |DelayBig:
      0243 48         000057 |	pha
      0244 8A         000058 |	txa
      0245 48         000059 |	pha
      0246 98         000060 |	tya
      0247 48         000061 |	pha
                      000062 |	
      0248 A9 48      000063 |	lda #048h
                      000064 |	
      024A            000065 |OutLoopBig:
      024A A2 FF      000066 |	ldx #0FFh
                      000067 |
      024C            000068 |InLoop1Big:
      024C A0 FF      000069 |	ldy #0FFh
                      000070 |
      024E            000071 |InLoop2Big:
      024E 88         000072 |	dey
      024F F0 FD      000073 |	beq InLoop2Big
                      000074 |
      0251 CA         000075 |	dex
      0252 D0 F8      000076 |	bne InLoop1Big
                      000077 |
      0254 38         000078 |	sec
      0255 E9 01      000079 |	sbc #1d
      0257 D0 F1      000080 |	bne OutLoopBig
                      000081 |	
                      000082 |;Restore registers from the stack.
      0259 68         000083 |	pla
      025A A8         000084 |	tay
      025B 68         000085 |	pla
      025C AA         000086 |	tax
      025D 68         000087 |	pla
                      000088 |
      025E 60         000089 |	rts
                      000090 |	
                      000091 |;Small delay subroutine
      025F            000092 |DelaySmall:
      025F 48         000093 |	pha
      0260 8A         000094 |	txa
      0261 48         000095 |	pha
      0262 98         000096 |	tya
      0263 48         000097 |	pha
                      000098 |	
      0264 A9 24      000099 |	lda #024h
                      000100 |	
      0266            000101 |OutLoopSmall:
      0266 A2 FF      000102 |	ldx #0FFh
                      000103 |
      0268            000104 |InLoop1Small:
      0268 A0 FF      000105 |	ldy #0FFh
                      000106 |
      026A            000107 |InLoop2Small:
      026A 88         000108 |	dey
      026B F0 FD      000109 |	beq InLoop2Small
                      000110 |
      026D CA         000111 |	dex
      026E D0 F8      000112 |	bne InLoop1Small
                      000113 |
      0270 38         000114 |	sec
      0271 E9 01      000115 |	sbc #1d
      0273 D0 F1      000116 |	bne OutLoopSmall
                      000117 |	
                      000118 |;Restore registers from the stack.
      0275 68         000119 |	pla
      0276 A8         000120 |	tay
      0277 68         000121 |	pla
      0278 AA         000122 |	tax
      0279 68         000123 |	pla
                      000124 |
      027A 60         000125 |	rts
                      000126 |    
                      000127 |    end
      
      *** Symbol Table ***
      {INLOOP2BIG=590, INLOOP2SMALL=618, OUTLOOPSMALL=614, MAIN=512, INLOOP1BIG=588, DELAYBIG=579, OUTLOOPBIG=586, DELAYSMALL=607, INLOOP1SMALL=616, =0}
.   %/output


%/group

%group,title="Problem 7",description="Ping Pong"
========================================================================================================
Problem 7

Write a Ping Pong simulation that will send one 
light back and forth from the left side of your 
LEDs to the right side and back again. Each time 
the light crosses the LEDs, increase its speed a 
little bit. If the left player's switch is pressed 
while the leftmost LED is on then send it back across 
the display, else give 1 point to the right player. 
If the right player's switch is pressed while the 
rightmost LED is on then send it back across the 
display, else give 1 point to the left player. If 
either player's switch is pressed while the ball 
is traveling in their direction but before it 
reaches the last LED, it is counted as a swing and 
a miss and the other player receives a point. The 
first player with 5 points wins. Keep track of the 
score and notify the users when either the left 
or the right player has won.

%uasm65,title="PingPong"
PrntMess: equ E00Ch ;Print a message to the user.

    ORG 0200h
    
    ; Initialize Ball
    LDA #00000001b
    STA Ball
    
    ; Initialize Speed
    LDA #0FFh
    STA Speed
    
    ; Initialize Scores
    LDA #0d
    STA ScoreRight
    STA ScoreLeft
    
    ; X & Y reg
    LDX #0d
    LDY #0d
    
GameLoop:
    LDA Ball
    STA 0A200h
    
    JSR shiftLeft
    
    LDA Speed
    SBC #6d
    STA Speed
    
    JSR shiftRight
    
    JMP GameLoop
    
; ###################
; #   Subroutines   #  
; ################### 

shiftLeft:
    ; Save register
    PHA
    TXA
    PHA
    TYA
    PHA
    
; Shift logic 
leftShiftLoop:
    ; Check if ball is already left; skip shift logic
    LDA Ball
    CMP #10000000b
    BEQ cancelLeftShift
    
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    ASL Ball
    
    ; Check if paddle is down; cheating
    LDA 0A600h
    CMP #00000010b
    BEQ rightScores
    
    LDA Ball
    STA 0A200h
    
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    ; Check if ball is already left; check for hitting
    LDA Ball
    CMP #10000000b
    BNE leftShiftLoop
    
    ; Check if paddle is down; hitting
    LDA 0A600h
    CMP #000000010b
    BNE rightScores
    
cancelLeftShift:
    ; Restore registers
    PLA
    TAY
    PLA
    TAX
    PLA
    RTS
 
rightScores:
    PHA
    TXA
    PHA
    TYA
    PHA
    
    ldx #RightScoredMessage<
    ldy #RightScoredMessage>
    jsr PrntMess
    
    INC scoreRight
    LDA scoreRight
    CMP #5d
    BEQ rightWins
    
    STA scoreRight
    
    LDA #00000001b
    STA Ball
    STA 0a200h
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    LDA #0FFh
    STA Speed
    
    PLA
    TAY
    PLA
    TAX
    PLA
    JMP GameLoop
    
rightWins:
    ldx #RightWinnerMessage<
    ldy #RightWinnerMessage>
    jsr PrntMess
    END    
    
delay:
    ; Save reg
    PHA
    TXA
    PHA
    TYA
    PHA
    
    LDA Speed
    
OutLoop:
    LDX #0FFh
    
InLoop1:
    LDY #0FFh
    
InLoop2:
    DEY
    BEQ InLoop2
    
    DEX
    BNE InLoop1
    
    SEC
    SBC #1d
    BNE OutLoop
    
; Restore registers
    PLA
    TAY
    PLA
    TAX
    PLA
    RTS
    

shiftRight:
    ; Save register
    PHA
    TXA
    PHA
    TYA
    PHA
    
; Shift logic 
rightShiftLoop:
    ; Check if ball is already right; skip shift logic
    LDA Ball
    CMP #00000001b
    BEQ cancelRightShift
    
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    LSR Ball
    
    ; Check if paddle is down; cheating
    LDA 0A600h
    CMP #00000001b
    BEQ leftScores
    
    LDA Ball
    STA 0A200h
    
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    ; Check if ball is already right; check for hitting
    LDA Ball
    CMP #00000001b
    BNE rightShiftLoop
    
    ; Check if paddle is down; hitting
    LDA 0A600h
    CMP #000000001b
    BNE leftScores
    
cancelRightShift:
    ; Restore registers
    PLA
    TAY
    PLA
    TAX
    PLA
    RTS
 
leftScores:
    PHA
    TXA
    PHA
    TYA
    PHA
    
    ldx #LeftScoredMessage<
    ldy #LeftScoredMessage>
    jsr PrntMess
    
    INC scoreLeft
    LDA scoreLeft
    CMP #5d
    BEQ leftWins
    
    STA scoreLeft
    
    LDA #10000000b
    STA Ball
    STA 0a200h
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    JSR delay
    
    LDA #0FFh
    STA Speed
    
    PLA
    TAY
    PLA
    TAX
    PLA
    JMP GameLoop
    
leftWins:
    ldx #LeftWinnerMessage<
    ldy #LeftWinnerMessage>
    jsr PrntMess
    END
  
; #################
; #   Variables   #  
; ################# 

Ball:
    dbt 0d

Speed:
    dbt 0d
    
ScoreRight:
    dbt 0d
    
ScoreLeft:
    dbt 0d
    END
    
LeftScoredMessage:
    dbt 0ah,0dh
    dbt "Left Scored!"
    dbt 0d
    
RightScoredMessage:
    dbt 0ah,0dh
    dbt "Right Scored!"
    dbt 0d
    
LeftWinnerMessage:
    dbt 0ah,0dh
    dbt "WINNER: LEFT!"
    dbt 0d
    
RightWinnerMessage:
    dbt 0ah,0dh
    dbt "WINNER: RIGHT!"
    dbt 0d
    
%/uasm65

    %output,mpversion="346",preserve="false"
      *** Executable Code ***
      
      %s19,description="Execute this fold to send program to U6502 monitor.",preserve="false"
      	S00700005541534DC2
      	S1170200A9018D7403A9FF8D7503A9008D76038D7703A20033
      	S1170214A000AD74038D00A2202D02AD7503E9068D75032057
      	S1170228DF024C1602488A489848AD7403C980F03620C20208
      	S117023C20C20220C20220C2020E7403AD00A6C902F026AD98
      	S117025074038D00A220C20220C20220C20220C202AD74033C
      	S1170264C980D0CAAD00A6C902D00668A868AA6860488A48A7
      	S11702789848A287A003200CE0EE7603AD7603C905F0308DAE
      	S117028C7603A9018D74038D00A220C20220C20220C2022038
      	S11702A0C20220C20220C20220C20220C202A9FF8D750368DD
      	S11702B4A868AA684C1602A2A7A003200CE0488A489848AD0D
      	S11702C87503A2FFA0FF88F0FDCAD0F838E901D0F168A86804
      	S11702DCAA6860488A489848AD7403C901F03620C20220C2C4
      	S11702F00220C20220C2024E7403AD00A6C901F026AD740310
      	S11703048D00A220C20220C20220C20220C202AD7403C90134
      	S1170318D0CAAD00A6C901D00668A868AA6860488A4898485C
      	S117032CA278A003200CE0EE7703AD7703C905F0308D77036C
      	S1170340A9808D74038D00A220C20220C20220C20220C202B9
      	S117035420C20220C20220C20220C202A9FF8D750368A868DC
      	S1170368AA684C1602A297A003200CE0000000000A0D4C6557
      	S117037C66742053636F72656421000A0D5269676874205366
      	S1170390636F72656421000A0D57494E4E45523A204C45460C
      	S11703A45421000A0D57494E4E45523A2052494748542100E9
      	S10303B841
      	S9030000FC
      %/s19
      
      *** List File ***
      
      0000            000001 |PrntMess: equ E00Ch ;Print a message to the user.
                      000002 |
      0200            000003 |    ORG 0200h
                      000004 |    
                      000005 |    ; Initialize Ball
      0200 A9 01      000006 |    LDA #00000001b
      0202 8D 74 03   000007 |    STA Ball
                      000008 |    
                      000009 |    ; Initialize Speed
      0205 A9 FF      000010 |    LDA #0FFh
      0207 8D 75 03   000011 |    STA Speed
                      000012 |    
                      000013 |    ; Initialize Scores
      020A A9 00      000014 |    LDA #0d
      020C 8D 76 03   000015 |    STA ScoreRight
      020F 8D 77 03   000016 |    STA ScoreLeft
                      000017 |    
                      000018 |    ; X & Y reg
      0212 A2 00      000019 |    LDX #0d
      0214 A0 00      000020 |    LDY #0d
                      000021 |    
      0216            000022 |GameLoop:
      0216 AD 74 03   000023 |    LDA Ball
      0219 8D 00 A2   000024 |    STA 0A200h
                      000025 |    
      021C 20 2D 02   000026 |    JSR shiftLeft
                      000027 |    
      021F AD 75 03   000028 |    LDA Speed
      0222 E9 06      000029 |    SBC #6d
      0224 8D 75 03   000030 |    STA Speed
                      000031 |    
      0227 20 DF 02   000032 |    JSR shiftRight
                      000033 |    
      022A 4C 16 02   000034 |    JMP GameLoop
                      000035 |    
                      000036 |; ###################
                      000037 |; #   Subroutines   #  
                      000038 |; ################### 
                      000039 |
      022D            000040 |shiftLeft:
                      000041 |    ; Save register
      022D 48         000042 |    PHA
      022E 8A         000043 |    TXA
      022F 48         000044 |    PHA
      0230 98         000045 |    TYA
      0231 48         000046 |    PHA
                      000047 |    
                      000048 |; Shift logic 
      0232            000049 |leftShiftLoop:
                      000050 |    ; Check if ball is already left; skip shift logic
      0232 AD 74 03   000051 |    LDA Ball
      0235 C9 80      000052 |    CMP #10000000b
      0237 F0 36      000053 |    BEQ cancelLeftShift
                      000054 |    
      0239 20 C2 02   000055 |    JSR delay
      023C 20 C2 02   000056 |    JSR delay
      023F 20 C2 02   000057 |    JSR delay
      0242 20 C2 02   000058 |    JSR delay
                      000059 |    
      0245 0E 74 03   000060 |    ASL Ball
                      000061 |    
                      000062 |    ; Check if paddle is down; cheating
      0248 AD 00 A6   000063 |    LDA 0A600h
      024B C9 02      000064 |    CMP #00000010b
      024D F0 26      000065 |    BEQ rightScores
                      000066 |    
      024F AD 74 03   000067 |    LDA Ball
      0252 8D 00 A2   000068 |    STA 0A200h
                      000069 |    
      0255 20 C2 02   000070 |    JSR delay
      0258 20 C2 02   000071 |    JSR delay
      025B 20 C2 02   000072 |    JSR delay
      025E 20 C2 02   000073 |    JSR delay
                      000074 |    
                      000075 |    ; Check if ball is already left; check for hitting
      0261 AD 74 03   000076 |    LDA Ball
      0264 C9 80      000077 |    CMP #10000000b
      0266 D0 CA      000078 |    BNE leftShiftLoop
                      000079 |    
                      000080 |    ; Check if paddle is down; hitting
      0268 AD 00 A6   000081 |    LDA 0A600h
      026B C9 02      000082 |    CMP #000000010b
      026D D0 06      000083 |    BNE rightScores
                      000084 |    
      026F            000085 |cancelLeftShift:
                      000086 |    ; Restore registers
      026F 68         000087 |    PLA
      0270 A8         000088 |    TAY
      0271 68         000089 |    PLA
      0272 AA         000090 |    TAX
      0273 68         000091 |    PLA
      0274 60         000092 |    RTS
                      000093 | 
      0275            000094 |rightScores:
      0275 48         000095 |    PHA
      0276 8A         000096 |    TXA
      0277 48         000097 |    PHA
      0278 98         000098 |    TYA
      0279 48         000099 |    PHA
                      000100 |    
      027A A2 87      000101 |    ldx #RightScoredMessage<
      027C A0 03      000102 |    ldy #RightScoredMessage>
      027E 20 0C E0   000103 |    jsr PrntMess
                      000104 |    
      0281 EE 76 03   000105 |    INC scoreRight
      0284 AD 76 03   000106 |    LDA scoreRight
      0287 C9 05      000107 |    CMP #5d
      0289 F0 30      000108 |    BEQ rightWins
                      000109 |    
      028B 8D 76 03   000110 |    STA scoreRight
                      000111 |    
      028E A9 01      000112 |    LDA #00000001b
      0290 8D 74 03   000113 |    STA Ball
      0293 8D 00 A2   000114 |    STA 0a200h
      0296 20 C2 02   000115 |    JSR delay
      0299 20 C2 02   000116 |    JSR delay
      029C 20 C2 02   000117 |    JSR delay
      029F 20 C2 02   000118 |    JSR delay
      02A2 20 C2 02   000119 |    JSR delay
      02A5 20 C2 02   000120 |    JSR delay
      02A8 20 C2 02   000121 |    JSR delay
      02AB 20 C2 02   000122 |    JSR delay
                      000123 |    
      02AE A9 FF      000124 |    LDA #0FFh
      02B0 8D 75 03   000125 |    STA Speed
                      000126 |    
      02B3 68         000127 |    PLA
      02B4 A8         000128 |    TAY
      02B5 68         000129 |    PLA
      02B6 AA         000130 |    TAX
      02B7 68         000131 |    PLA
      02B8 4C 16 02   000132 |    JMP GameLoop
                      000133 |    
      02BB            000134 |rightWins:
      02BB A2 A7      000135 |    ldx #RightWinnerMessage<
      02BD A0 03      000136 |    ldy #RightWinnerMessage>
      02BF 20 0C E0   000137 |    jsr PrntMess
                      000138 |    END    
                      000139 |    
      02C2            000140 |delay:
                      000141 |    ; Save reg
      02C2 48         000142 |    PHA
      02C3 8A         000143 |    TXA
      02C4 48         000144 |    PHA
      02C5 98         000145 |    TYA
      02C6 48         000146 |    PHA
                      000147 |    
      02C7 AD 75 03   000148 |    LDA Speed
                      000149 |    
      02CA            000150 |OutLoop:
      02CA A2 FF      000151 |    LDX #0FFh
                      000152 |    
      02CC            000153 |InLoop1:
      02CC A0 FF      000154 |    LDY #0FFh
                      000155 |    
      02CE            000156 |InLoop2:
      02CE 88         000157 |    DEY
      02CF F0 FD      000158 |    BEQ InLoop2
                      000159 |    
      02D1 CA         000160 |    DEX
      02D2 D0 F8      000161 |    BNE InLoop1
                      000162 |    
      02D4 38         000163 |    SEC
      02D5 E9 01      000164 |    SBC #1d
      02D7 D0 F1      000165 |    BNE OutLoop
                      000166 |    
                      000167 |; Restore registers
      02D9 68         000168 |    PLA
      02DA A8         000169 |    TAY
      02DB 68         000170 |    PLA
      02DC AA         000171 |    TAX
      02DD 68         000172 |    PLA
      02DE 60         000173 |    RTS
                      000174 |    
                      000175 |
      02DF            000176 |shiftRight:
                      000177 |    ; Save register
      02DF 48         000178 |    PHA
      02E0 8A         000179 |    TXA
      02E1 48         000180 |    PHA
      02E2 98         000181 |    TYA
      02E3 48         000182 |    PHA
                      000183 |    
                      000184 |; Shift logic 
      02E4            000185 |rightShiftLoop:
                      000186 |    ; Check if ball is already right; skip shift logic
      02E4 AD 74 03   000187 |    LDA Ball
      02E7 C9 01      000188 |    CMP #00000001b
      02E9 F0 36      000189 |    BEQ cancelRightShift
                      000190 |    
      02EB 20 C2 02   000191 |    JSR delay
      02EE 20 C2 02   000192 |    JSR delay
      02F1 20 C2 02   000193 |    JSR delay
      02F4 20 C2 02   000194 |    JSR delay
                      000195 |    
      02F7 4E 74 03   000196 |    LSR Ball
                      000197 |    
                      000198 |    ; Check if paddle is down; cheating
      02FA AD 00 A6   000199 |    LDA 0A600h
      02FD C9 01      000200 |    CMP #00000001b
      02FF F0 26      000201 |    BEQ leftScores
                      000202 |    
      0301 AD 74 03   000203 |    LDA Ball
      0304 8D 00 A2   000204 |    STA 0A200h
                      000205 |    
      0307 20 C2 02   000206 |    JSR delay
      030A 20 C2 02   000207 |    JSR delay
      030D 20 C2 02   000208 |    JSR delay
      0310 20 C2 02   000209 |    JSR delay
                      000210 |    
                      000211 |    ; Check if ball is already right; check for hitting
      0313 AD 74 03   000212 |    LDA Ball
      0316 C9 01      000213 |    CMP #00000001b
      0318 D0 CA      000214 |    BNE rightShiftLoop
                      000215 |    
                      000216 |    ; Check if paddle is down; hitting
      031A AD 00 A6   000217 |    LDA 0A600h
      031D C9 01      000218 |    CMP #000000001b
      031F D0 06      000219 |    BNE leftScores
                      000220 |    
      0321            000221 |cancelRightShift:
                      000222 |    ; Restore registers
      0321 68         000223 |    PLA
      0322 A8         000224 |    TAY
      0323 68         000225 |    PLA
      0324 AA         000226 |    TAX
      0325 68         000227 |    PLA
      0326 60         000228 |    RTS
                      000229 | 
      0327            000230 |leftScores:
      0327 48         000231 |    PHA
      0328 8A         000232 |    TXA
      0329 48         000233 |    PHA
      032A 98         000234 |    TYA
      032B 48         000235 |    PHA
                      000236 |    
      032C A2 78      000237 |    ldx #LeftScoredMessage<
      032E A0 03      000238 |    ldy #LeftScoredMessage>
      0330 20 0C E0   000239 |    jsr PrntMess
                      000240 |    
      0333 EE 77 03   000241 |    INC scoreLeft
      0336 AD 77 03   000242 |    LDA scoreLeft
      0339 C9 05      000243 |    CMP #5d
      033B F0 30      000244 |    BEQ leftWins
                      000245 |    
      033D 8D 77 03   000246 |    STA scoreLeft
                      000247 |    
      0340 A9 80      000248 |    LDA #10000000b
      0342 8D 74 03   000249 |    STA Ball
      0345 8D 00 A2   000250 |    STA 0a200h
      0348 20 C2 02   000251 |    JSR delay
      034B 20 C2 02   000252 |    JSR delay
      034E 20 C2 02   000253 |    JSR delay
      0351 20 C2 02   000254 |    JSR delay
      0354 20 C2 02   000255 |    JSR delay
      0357 20 C2 02   000256 |    JSR delay
      035A 20 C2 02   000257 |    JSR delay
      035D 20 C2 02   000258 |    JSR delay
                      000259 |    
      0360 A9 FF      000260 |    LDA #0FFh
      0362 8D 75 03   000261 |    STA Speed
                      000262 |    
      0365 68         000263 |    PLA
      0366 A8         000264 |    TAY
      0367 68         000265 |    PLA
      0368 AA         000266 |    TAX
      0369 68         000267 |    PLA
      036A 4C 16 02   000268 |    JMP GameLoop
                      000269 |    
      036D            000270 |leftWins:
      036D A2 97      000271 |    ldx #LeftWinnerMessage<
      036F A0 03      000272 |    ldy #LeftWinnerMessage>
      0371 20 0C E0   000273 |    jsr PrntMess
                      000274 |    END
                      000275 |  
                      000276 |; #################
                      000277 |; #   Variables   #  
                      000278 |; ################# 
                      000279 |
      0374            000280 |Ball:
      0374 00         000281 |    dbt 0d
                      000282 |
      0375            000283 |Speed:
      0375 00         000284 |    dbt 0d
                      000285 |    
      0376            000286 |ScoreRight:
      0376 00         000287 |    dbt 0d
                      000288 |    
      0377            000289 |ScoreLeft:
      0377 00         000290 |    dbt 0d
                      000291 |    END
                      000292 |    
      0378            000293 |LeftScoredMessage:
      0378 0A         000294 |    dbt 0ah,0dh
      0379 0D               
      037A 4C         000295 |    dbt "Left Scored!"
      037B 65 66 74         
      037E 20 53 63         
      0381 6F 72 65         
      0384 64 21            
      0386 00         000296 |    dbt 0d
                      000297 |    
      0387            000298 |RightScoredMessage:
      0387 0A         000299 |    dbt 0ah,0dh
      0388 0D               
      0389 52         000300 |    dbt "Right Scored!"
      038A 69 67 68         
      038D 74 20 53         
      0390 63 6F 72         
      0393 65 64 21         
      0396 00         000301 |    dbt 0d
                      000302 |    
      0397            000303 |LeftWinnerMessage:
      0397 0A         000304 |    dbt 0ah,0dh
      0398 0D               
      0399 57         000305 |    dbt "WINNER: LEFT!"
      039A 49 4E 4E         
      039D 45 52 3A         
      03A0 20 4C 45         
      03A3 46 54 21         
      03A6 00         000306 |    dbt 0d
                      000307 |    
      03A7            000308 |RightWinnerMessage:
      03A7 0A         000309 |    dbt 0ah,0dh
      03A8 0D               
      03A9 57         000310 |    dbt "WINNER: RIGHT!"
      03AA 49 4E 4E         
      03AD 45 52 3A         
      03B0 20 52 49         
      03B3 47 48 54         
      03B6 21               
      03B7 00         000311 |    dbt 0d
      
      *** Symbol Table ***
      {BALL=884, CANCELRIGHTSHIFT=801, PRNTMESS=57356, RIGHTSHIFTLOOP=740, INLOOP2=718, INLOOP1=716, OUTLOOP=714, RIGHTSCORES=629, LEFTSHIFTLOOP=562, CANCELLEFTSHIFT=623, SPEED=885, SHIFTLEFT=557, RIGHTWINNERMESSAGE=935, DELAY=706, LEFTSCORES=807, SCORERIGHT=886, RIGHTSCOREDMESSAGE=903, SHIFTRIGHT=735, LEFTWINNERMESSAGE=919, SCORELEFT=887, GAMELOOP=534, LEFTWINS=877, LEFTSCOREDMESSAGE=888, RIGHTWINS=699, =0}
.   %/output



%/group